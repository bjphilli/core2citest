// <auto-generated />
using CoreCITest.Web.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CoreCITest.Web.Migrations
{
    [DbContext(typeof(CoreContext))]
    [Migration("20180429235608_RemoveHelloId")]
    partial class RemoveHelloId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("CoreCITest.Data.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("CoreCITest.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CoreCITest.Data.Post", b =>
                {
                    b.HasOne("CoreCITest.Data.User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoreCITest.Data.User", b =>
                {
                    b.OwnsOne("CoreCITest.Data.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<long>("UserId");

                            b1.Property<string>("City")
                                .HasColumnName("BillingCity");

                            b1.Property<string>("Country")
                                .HasColumnName("BillingCountry");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("BillingPostalCode");

                            b1.Property<string>("State")
                                .HasColumnName("BillingState");

                            b1.Property<string>("Street1")
                                .HasColumnName("BillingStreet1");

                            b1.Property<string>("Street2")
                                .HasColumnName("BillingStreet2");

                            b1.ToTable("User");

                            b1.HasOne("CoreCITest.Data.User")
                                .WithOne("BillingAddress")
                                .HasForeignKey("CoreCITest.Data.Address", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
